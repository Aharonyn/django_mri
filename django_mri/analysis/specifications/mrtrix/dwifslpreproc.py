from django_analyses.models.input.definitions import (
    FileInputDefinition,
    FloatInputDefinition,
    IntegerInputDefinition,
    ListInputDefinition,
    StringInputDefinition,
    BooleanInputDefinition,
    DirectoryInputDefinition,
)

from django_analyses.models.output.definitions import (
    FileOutputDefinition,
    ListOutputDefinition,
)
from django_mri.models.inputs.nifti_input_definition import (
    NiftiInputDefinition,
)
from django_mri.models.outputs.nifti_output_definition import (
    NiftiOutputDefinition,
)

DWIFSLPREPROC_INPUT_SPECIFICATION = {
    "scan": {
        "type": NiftiInputDefinition,
        "required": True,
        "description": "Input DWI image.",
        "is_configuration": False,
        "run_method_input": True,
    },
    "destination": {
        "type": DirectoryInputDefinition,
        "description": "Run output destination.",
        "required": False,
        "is_configuration": False,
        "is_output_directory": True,
        "run_method_input": True,
    },
    "pe_dir": {
        "type": StringInputDefinition,
        "description": "Manually specify the phase encoding direction of the input series",
        "choices": [
            "rl",
            "lr",
            "ap",
            "pa",
            "is",
            "si",
            "-0",
            "0",
            "-1",
            "1",
            "-2",
            "2",
            "i",
            "i-",
            "j",
            "j-",
            "k",
            "k-",
        ],
    },
    "readout_time": {
        "type": FloatInputDefinition,
        "description": "Manually specify the total readout time of the input series (in seconds)",
    },
    "se_epi": {
        "type": NiftiInputDefinition,
        "description": "Provide an additional image series consisting of spin-echo EPI images, which is to be used exclusively by topup for estimating the inhomogeneity field (i.e. it will not form part of the output image series)",
    },
    "align_seepi": {
        "type": BooleanInputDefinition,
        "description": "Achieve alignment between the SE-EPI images used for inhomogeneity field estimation, and the DWIs (more information in Description section)",
    },
    "json_import": {
        "type": FileInputDefinition,
        "description": "Import image header information from an associated JSON file (may be necessary to determine phase encoding information)",
    },
    "topup_options": {
        "type": StringInputDefinition,
        "description": "Manually provide additional command-line options to the topup command (provide a string within quotation marks that contains at least one space, even if only passing a single command-line option to topup)",
    },
    "eddy_options": {
        "type": StringInputDefinition,
        "description": "Manually provide additional command-line options to the eddy command (provide a string within quotation marks that contains at least one space, even if only passing a single command-line option to eddy)",
    },
    "eddy_mask": {
        "type": NiftiInputDefinition,
        "description": "Provide a processing mask to use for eddy, instead of having dwifslpreproc generate one internally using dwi2mask",
    },
    "eddy_slspec": {
        "type": FileInputDefinition,
        "description": "Provide a file containing slice groupings for eddyâ€™s slice-to-volume registration",
    },
    "eddyqc_text": {
        "type": DirectoryInputDefinition,
        "description": "Copy the various text-based statistical outputs generated by eddy, and the output of eddy_qc (if installed), into an output directory",
        "is_output_path": True,
    },
    "eddyqc_all": {
        "type": DirectoryInputDefinition,
        "description": "Copy ALL outputs generated by eddy (including images), and the output of eddy_qc (if installed), into an output directory",
        "is_output_path": True,
    },
    "rpe_none": {
        "type": BooleanInputDefinition,
        "description": "Specify that no reversed phase-encoding image data is being provided; eddy will perform eddy current and motion correction only",
    },
    "rpe_pair": {
        "type": BooleanInputDefinition,
        "description": "Specify that a set of images (typically b=0 volumes) will be provided for use in inhomogeneity field estimation only (using the -se_epi option)",
    },
    "rpe_all": {
        "type": BooleanInputDefinition,
        "description": "Specify that ALL DWIs have been acquired with opposing phase-encoding",
    },
    "rpe_header": {
        "type": BooleanInputDefinition,
        "description": "Specify that the phase-encoding information can be found in the image header(s), and that this is the information that the script should use",
    },
    "grad": {
        "type": StringInputDefinition,
        "description": "Provide the diffusion gradient table in MRtrix format",
    },
    "grad_fsl": {
        "type": ListInputDefinition,
        "element_type": "STR",
        "description": "Provide the diffusion gradient table in MRtrix format",
    },
    "export_grad_mrtrix": {
        "type": StringInputDefinition,
        "description": "Export the final gradient table in MRtrix format",
        "is_output_path": True,
    },
    "export_grad_fsl": {
        "type": ListInputDefinition,
        "element_type": "STR",
        "description": "Export the final gradient table in FSL bvecs/bvals format",
        "is_output_path": True,
    },
    "nocleanup": {
        "type": BooleanInputDefinition,
        "description": "do not delete intermediate files during script execution, and do not delete scratch directory at script completion.",
    },
    "scratch": {
        "type": StringInputDefinition,
        "description": "manually specify the path in which to generate the scratch directory.",
        "is_output_path": True,
    },
    "nthreads": {
        "type": IntegerInputDefinition,
        "description": "Number of threads. if zero, the number of available cpus will be used.",
    },
}

DWIFSLPREPROC_OUTPUT_SPECIFICATION = {
    "preprocessed_dwi": {
        "type": NiftiOutputDefinition,
        "description": "The output preprocessed DWI image.",
    },
    "out_file": {
        "type": NiftiOutputDefinition,
        "description": "The output denoised DWI image.",
    },
}

